{"version":3,"sources":["../../src/handlers/car.js"],"names":["req","res","next","perPage","page","parseInt","query","isNaN","Car","find","queryArray","validFields","Object","keys","schema","paths","console","log","forEach","criteria","field","arrValues","Array","push","$in","length","and","skip","Math","max","limit","exec","then","allCars","count","items","statusCode","errorMsg","getCars","createCar","findPopulateCarById","getCar","putCar","patchCar","deleteCar","car","make","body","model","color","save","newCar","catch","err","mongoose","Types","ObjectId","isValid","params","id","findById","prop","remove"],"mappings":"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","file":"car.js","sourcesContent":["import Car from '../models/cars';\nimport {\n  createResponse,\n  handleMongooseError\n} from './utils';\nimport mongoose from 'mongoose';\n\n\n// TODO: Use a util/createResponse function\n// TDOD: Use req.json\n\nexport async function getCars(req, res, next) {\n  const perPage = 10; //TODO: Make it configurable\n  let page = parseInt(req.query.page, 10);\n  if (isNaN(page)) {\n    page = 0;\n  }\n  try {\n    // TODO: Decide if we want to show information like page id is oyt of range\n    const query = Car.find();\n    const queryArray = [];\n    const validFields = Object.keys(Car.schema.paths);\n    console.log(req.query);\n    Object.keys(req.query || {}).forEach(criteria => {\n      if (validFields.find(field => criteria === field)) {\n        const arrValues = req.query[criteria] instanceof Array\n                       ? req.query[criteria]\n                       : [req.query[criteria]];\n        queryArray.push({\n          [criteria] :{ \n            $in: arrValues\n            }\n        }) ;\n      }\n    })\n    if (queryArray.length > 0) {\n      query.and(queryArray);\n    }\n    await query\n      .skip(Math.max((perPage * page), 0))\n      .limit(perPage)\n      .exec()\n      .then(allCars => {\n        if (allCars && allCars.length === 0) {\n          return createResponse(res, 404, 'Items not found');\n        }\n        createResponse(res, 200, null, 'Cars retrieved', { \n          count: allCars.length,\n          page: page,\n          items: allCars});\n      })\n    } catch(err){\n      console.log(err);\n      const {statusCode = 500, errorMsg = 'Could not retrieve cars'} = handleMongooseError(err);  \n      createResponse(res, statusCode, errorMsg);\n    }\n}\n\nexport function createCar(req, res, next) {\n  const car = new Car();\n  car.make = req.body.make;\n  car.model = req.body.model;\n  car.color = req.body.color;\n  car.save().then(newCar => {\n    createResponse(res, 201, null, 'Car created', newCar);\n  }).catch(err => {\n    const {statusCode = 500, errorMsg = 'Could not create car' } = handleMongooseError(err);\n    createResponse(res, statusCode, errorMsg);\n  })\n}\n\n// Functions on a existing item car\n// These handlers will be for route /car/:carId\n// A middleware will populate the car by default\n\nexport function findPopulateCarById(req, res, next) {\n  if (!mongoose.Types.ObjectId.isValid(req.params.id)){\n    return createResponse(res, 400, 'Not a valid id');\n  }\n  Car.findById(req.params.id)\n    .then((car) => {\n      if (!car) {\n        return createResponse(res, 404, 'Item not found');\n      }\n      req.car = car;\n      next();\n    })\n    .catch((err) => {\n      const {statusCode = 500, errorMsg = 'Could not retrieve car'} = handleMongooseError(err);\n      createResponse(res, statusCode, errorMsg);\n    });\n}\n\nexport function getCar(req, res) {\n  createResponse(res, 200, null, 'Item found', req.car);\n}\n\nexport function putCar(req, res, next) {\n  req.car.make = req.body.make;\n  req.car.model = req.body.model;\n  req.car.color = req.body.color;\n  req.car.save().then(newCar => {\n    createResponse(res, 202, null, 'Car updated', newCar);\n  }).catch(err => {\n    const {statusCode = 500, errorMsg = 'Car could not be updated'} = handleMongooseError(err);\n    createResponse(res, statusCode, errorMsg);\n  })\n}\n\nexport function patchCar(req, res, next) {\n  if (req.body.id) {\n    delete req.body.id;\n  }\n  Object.keys(req.body).forEach((prop) => {\n    req.car[prop] = req.body[prop];\n  });\n  req.car.save()\n    .then(newCar => {\n      createResponse(res, 202, null, 'Car modified',newCar);\n    })\n    .catch(err => {\n      const {statusCode = 500, errorMsg= 'Car could not be modified'} = handleMongooseError(err);\n      createResponse(res, statusCode, errorMsg);\n    });\n}\n\nexport function deleteCar(req, res, next) {\n  req.car.remove().then(_ => {\n    createResponse(res, 202, null, 'Car deleted');\n  }).catch(err => {\n    const {statusCode = 500, errorMsg= 'Car could not be deleted'} = handleMongooseError(err);\n    createResponse(res, statusCode, errorMsg);\n  })\n}"]}