{"version":3,"sources":["../../../src/handlers/test/mock-gen.js"],"names":["num","model","make","color","carArr","i","makeGen","modelGen","colorGen","faker","helpers","randomize","makerArr","colors","length","makerModelArr","makeToModelMap","push","Car","insertMany","ordered","console","log","code","populateDbMock","remove","then","dropAll","generateData","getValidRandomCar","getValidCar","carFakeData","JSON","parse","fs","readFileSync","__dirname","Object","keys","arr","content","contentParsed","forEach","maker","value","models","map","title","writeFileSync","stringify","retArr","car"],"mappings":"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","file":"mock-gen.js","sourcesContent":["import Car from '../../models/cars';\nimport colors from '../../models/colors';\nimport fs from 'fs';\nimport faker from 'faker';\n\n// TODO: Put it in init function\nconst carFakeData = JSON.parse(fs.readFileSync(__dirname + '/car-mock-data.json'));\nconst makerArr = Object.keys(carFakeData);\nconst makeToModelMap = carFakeData;\n\nexport function generateData() {\n  const arr = [];\n  const content = fs.readFileSync('./car-mock-data.json');\n  const contentParsed  = JSON.parse(content);\n  contentParsed.forEach(maker => {\n    arr.push({\n      [maker.value] : maker.models.map(model => model.title) \n    });\n  });\n\n  fs.writeFileSync('car-data-filter-1.json', JSON.stringify(arr));\n}\n\nexport function getValidRandomCar(num) {\n  const retArr = [];\n  for(let i = 0; i < num; i++) {\n    const car = new Car();\n    car.make = faker.helpers.randomize(makerArr);\n    car.model = faker.helpers.randomize(makeToModelMap[car.make]);\n    car.color = faker.helpers.randomize(colors);\n    retArr.push(car);\n  }\n  return retArr;\n}\n\nexport function getValidCar() {\n  const car = new Car();\n  car.make = 'Ford';\n  car.model = 'Endeavour';\n  car.color = 'White';  \n  return car;\n}\n\nexport async function populateDbMock({ num = 20, model, make, color }) {\n  const carArr = [];\n  for(let i = 0; i < num ; i++ ) {\n    let makeGen, modelGen, colorGen;\n    if (model || make || color) {\n      // If nay of these are specified then we only randomize the maker\n      // For other fields we just keep iterating through the arrays\n      makeGen = make || faker.helpers.randomize(makerArr);\n      colorGen = color || colors[i%colors.length];\n      const makerModelArr = makeToModelMap[makeGen];\n      modelGen = model || makerModelArr[i%makerModelArr.length];\n    } else {\n      makeGen = faker.helpers.randomize(makerArr);\n      modelGen = faker.helpers.randomize(makeToModelMap[makeGen]);\n      colorGen = faker.helpers.randomize(colors);\n    }\n    carArr.push({\n      make : makeGen,\n      model : modelGen,\n      color : colorGen\n    })\n  }\n  try {\n    await Car.insertMany(carArr, {\n      ordered: false\n    });\n    console.log('Data mocked');\n    return true;\n  } catch(err) {\n    if(err && err.code === 11000) {\n      return true;\n    }\n    console.log(err);\n    return false;\n  }\n}\n\nexport async function dropAll() {\n  await Car.remove({}).then( _ => {\n    console.log(`All removed`);\n  })\n}\n"]}