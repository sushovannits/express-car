{"version":3,"sources":["../src/app.js"],"names":["routes","MongoStore","session","dotenv","load","path","app","dbName","process","env","NODE_ENV","DB_NAME_TEST","DB_NAME","mongodbUri","MONGODB_URI","console","log","mongoose","connect","useNewUrlParser","connection","on","err","error","chalk","red","exit","set","PORT","BASE_URL","get","use","bodyParser","json","urlencoded","extended","resave","saveUninitialized","secret","SESSION_SECRET","cookie","maxAge","store","url","autoReconnect","v1","req","res","next","status","stack"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,M;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAMC,aAAa,4BAAaC,wBAAb,CAAnB;;AAEA;;;AAGA;AACAC,iBAAOC,IAAP,CAAY;AACVC,QAAM;AADI,CAAZ;;AAIA;;;AAGO,IAAMC,oBAAM,wBAAZ;;AAEP;;;AAGA,IAAMC,SAASC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,GACGF,QAAQC,GAAR,CAAYE,YAAZ,IAA4B,QAD/B,GAEGH,QAAQC,GAAR,CAAYG,OAF9B;AAGA,IAAMC,aAAaL,QAAQC,GAAR,CAAYK,WAAZ,GAA0BP,MAA7C;AACAQ,QAAQC,GAAR,CAAYH,UAAZ;AACAI,mBAASC,OAAT,CAAiBL,UAAjB,EAA6B,EAAEM,iBAAiB,IAAnB,EAA7B;AACAF,mBAASG,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAACC,GAAD,EAAS;AACvCP,UAAQQ,KAAR,CAAcD,GAAd;AACAP,UAAQC,GAAR,CAAY,wEAAZ,EAAsFQ,gBAAMC,GAAN,CAAU,GAAV,CAAtF;AACAjB,UAAQkB,IAAR;AACD,CAJD;;AAMA;;;AAGApB,IAAIqB,GAAJ,CAAQ,MAAR,EAAgBnB,QAAQC,GAAR,CAAYmB,IAAZ,IAAoB,IAApC;AACAtB,IAAIqB,GAAJ,CAAQ,SAAR,EAAmBnB,QAAQC,GAAR,CAAYoB,QAAZ,0BAA4CvB,IAAIwB,GAAJ,CAAQ,MAAR,CAA/D;AACA;AACA;AACA;;AAEA;;;AAGAxB,IAAIyB,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAzB,IAAIyB,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACA3B,IAAIyB,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB;AAC5BC,YAAU;AADkB,CAAtB,CAAR;AAGA7B,IAAIyB,GAAJ,CAAQ,iCAAR;AACAzB,IAAIyB,GAAJ,CAAQ,8BAAQ;AACdK,UAAQ,IADM;AAEdC,qBAAmB,IAFL;AAGdC,UAAQ9B,QAAQC,GAAR,CAAY8B,cAHN;AAIdC,UAAQ,EAAEC,QAAQ,UAAV,EAJM,EAIkB;AAChCC,SAAO,IAAIzC,UAAJ,CAAe;AACpB0C,SAAKnC,QAAQC,GAAR,CAAYK,WADG;AAEpB8B,mBAAe;AAFK,GAAf;AALO,CAAR,CAAR;;AAWA;;;AAGA;AACAtC,IAAIyB,GAAJ,CAAQ,qBAAR;;AAEA;;;AAGAhB,QAAQC,GAAR,CAAYhB,MAAZ;AACAM,IAAIyB,GAAJ,CAAQ,GAAR,EAAa/B,OAAO6C,EAApB;AACAvC,IAAIyB,GAAJ,CAAQ,MAAR,EAAgB/B,OAAO6C,EAAvB;;AAEA;;;AAGAvC,IAAIyB,GAAJ,CAAQ,UAASe,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/BjC,UAAQC,GAAR,CAAY8B,IAAIG,MAAhB;AACE,6BAAeF,GAAf,EAAoB,GAApB,EAAyB,2BAAzB;AACH,CAHD;AAIAzC,IAAIyB,GAAJ,CAAQ,UAAUT,GAAV,EAAewB,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AACrCjC,UAAQQ,KAAR,CAAcD,IAAI4B,KAAlB;AACA,6BAAeH,GAAf,EAAoB,GAApB,EAAyB,wCAAzB;AACD,CAHD","file":"app.js","sourcesContent":["import express from 'express';\nimport dotenv from 'dotenv';\nimport bodyParser from 'body-parser';\nimport expressValidator from 'express-validator';\nimport session from 'express-session';\nimport * as routes from './router/routes';\nimport mongoose from 'mongoose';\nimport ConnectMongo from 'connect-mongo';\nimport chalk from 'chalk';\nimport logger from 'morgan';\nimport cors from 'cors';\nimport { createResponse } from './handlers/utils';\nconst MongoStore = ConnectMongo(session);\n\n/**\n * Load configuration: Authentication enable/disable, API keys, etc.\n */\n// TODO: Consider moving to one file\ndotenv.load({\n  path: '.env.config'\n});\n\n/**\n * Create the express app\n */\nexport const app = express();\n\n/**\n * Conect database (MongoDB)\n */\nconst dbName = process.env.NODE_ENV === 'test'\n                ? process.env.DB_NAME_TEST || 'testdb'\n                : process.env.DB_NAME;\nconst mongodbUri = process.env.MONGODB_URI + dbName;\nconsole.log(mongodbUri);\nmongoose.connect(mongodbUri, { useNewUrlParser: true });\nmongoose.connection.on('error', (err) => {\n  console.error(err);\n  console.log('%s Connection error with mongodb. Please make sure MongoDB is running.', chalk.red('âœ—'));\n  process.exit();\n});\n\n/**\n * Configure application\n */\napp.set('port', process.env.PORT || 8000);\napp.set('baseUrl', process.env.BASE_URL || `http://localhost:${app.get('port')}`);\n// TODO:\n// compression?\n// use of logger?\n\n/**\n * Set uop middlewares\n */\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(expressValidator());\napp.use(session({\n  resave: true,\n  saveUninitialized: true,\n  secret: process.env.SESSION_SECRET,\n  cookie: { maxAge: 1209600000 }, // two weeks in milliseconds\n  store: new MongoStore({\n    url: process.env.MONGODB_URI,\n    autoReconnect: true,\n  })\n}));\n\n/**\n *  Cors enable\n */\n// TODO: Later implement route specific CORS or dynamic origin. Now allowed for all origin\napp.use(cors());\n\n/**\n * Set up versioning and routes\n */\nconsole.log(routes);\napp.use('/', routes.v1);\napp.use('/v1/', routes.v1);\n\n/**\n * App wide handlers for unsupported and error\n */\napp.use(function(req, res, next) {\n  console.log(req.status);\n    createResponse(res, 501, 'That is not supported yet');\n});\napp.use(function (err, req, res, next) {\n  console.error(err.stack)\n  createResponse(res, 500, 'Something broke! Please raise a ticket');\n});\n\n\n\n"]}